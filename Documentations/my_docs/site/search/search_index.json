{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the MarLib Assembly Documentation! \ud83d\ude80 About the Library MarLib is a collection of useful functions written in NASM assembly for i8086 , designed for working with numbers, strings, and input/output operations. It simplifies low-level programming by providing ready-to-use tools for everyday tasks. Features (just a few of them) \u2705 Simplified number and string input/output \u2705 Conversion between numeric and string formats \u2705 Basic memory operations \u2705 Optimized algorithms for fast execution How to use? 1) Include the library in your project. %include \"MarLib.asm\" 2) Call the required function as described in the documentation. section .data user_input dw 0 section .text read_int user_input 3) Compile and run your program in DOS/DOSBox + NASM . nasm -f bin my_program.asm -o my_program.com dosbox my_program.com \ud83d\udcec Feedback If you have any questions, suggestions, or feedback on improving the library, feel free to contact me: \ud83d\udce7 Email: m.brezin@yandex.ru \ud83d\udc19 GitHub Issues: \u041e\u0442\u043a\u0440\u044b\u0442\u044c \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435 I appreciate your feedback and suggestions! \ud83d\ude80","title":"Home"},{"location":"#welcome-to-the-marlib-assembly-documentation","text":"","title":"Welcome to the MarLib Assembly Documentation! \ud83d\ude80"},{"location":"#about-the-library","text":"MarLib is a collection of useful functions written in NASM assembly for i8086 , designed for working with numbers, strings, and input/output operations. It simplifies low-level programming by providing ready-to-use tools for everyday tasks.","title":"About the Library"},{"location":"#features-just-a-few-of-them","text":"\u2705 Simplified number and string input/output \u2705 Conversion between numeric and string formats \u2705 Basic memory operations \u2705 Optimized algorithms for fast execution","title":"Features (just a few of them)"},{"location":"#how-to-use","text":"1) Include the library in your project. %include \"MarLib.asm\" 2) Call the required function as described in the documentation. section .data user_input dw 0 section .text read_int user_input 3) Compile and run your program in DOS/DOSBox + NASM . nasm -f bin my_program.asm -o my_program.com dosbox my_program.com","title":"How to use?"},{"location":"#feedback","text":"If you have any questions, suggestions, or feedback on improving the library, feel free to contact me: \ud83d\udce7 Email: m.brezin@yandex.ru \ud83d\udc19 GitHub Issues: \u041e\u0442\u043a\u0440\u044b\u0442\u044c \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435 I appreciate your feedback and suggestions! \ud83d\ude80","title":"\ud83d\udcec Feedback"},{"location":"numbers/","text":"Functions for Numbers Expand the list read_int str_to_int int_to_str int_to_bin read_int Description Reads an integer from the keyboard. Input ends when the Enter key (Carriage Return) is pressed. The entered characters must be digits from '0' to '9'. The final number is stored in the specified variable. Arguments Parametrs Description %1 Address of the variable where the entered integer will be stored. Usage Example section .data user_input dw 0 section .text read_int user_input str_to_int Description Converts a string representing an integer into an int value. The string must end with $ and contain only digits from '0' to '9'. Arguments Parametrs Description %1 Address of the string to be converted. %2 Address of the variable where the integer will be stored. Usage Example section .data num_str db \"123$\", 0 result dw 0 section .text str_to_int num_str, result int_to_str Description Converts an integer into an ASCII string. The number can be passed in one of the registers ( AX , BX , DX ) or as a memory address. The result is stored in string format in the specified buffer, with the string ending in $ . Arguments Parameter Description %1 Address of the buffer where the string representing the number will be stored. %2 Register or memory address containing the integer to be converted. Allowed values: AX , BX , DX , or a memory address. Usage Example section .data buffer db 10, 0 ; String buffer, must be large enough number dw 1234 ; Number to be converted section .text int_to_str buffer, number int_to_bin Description Converts an integer (up to 5 digits) into a binary string. The result is stored in string format in the specified buffer. Each bit of the number is represented by the character '0' or '1'. The string is terminated by the null character $ . Arguments Parameter Description %1 Address of the integer to be converted to binary format. %2 Address of the buffer where the result (binary string) will be written. Example usage section .data number dw 12345 ; Example number for conversion bin_result db 17, 0 ; Buffer to store the binary string (16 bits + 1 for null character $) section .text int_to_bin number, bin_result","title":"Functions for Numbers"},{"location":"numbers/#functions-for-numbers","text":"Expand the list read_int str_to_int int_to_str int_to_bin","title":"Functions for Numbers"},{"location":"numbers/#read_int","text":"","title":"read_int"},{"location":"numbers/#description","text":"Reads an integer from the keyboard. Input ends when the Enter key (Carriage Return) is pressed. The entered characters must be digits from '0' to '9'. The final number is stored in the specified variable.","title":"Description"},{"location":"numbers/#arguments","text":"Parametrs Description %1 Address of the variable where the entered integer will be stored.","title":"Arguments"},{"location":"numbers/#usage-example","text":"section .data user_input dw 0 section .text read_int user_input","title":"Usage Example"},{"location":"numbers/#str_to_int","text":"","title":"str_to_int"},{"location":"numbers/#description_1","text":"Converts a string representing an integer into an int value. The string must end with $ and contain only digits from '0' to '9'.","title":"Description"},{"location":"numbers/#arguments_1","text":"Parametrs Description %1 Address of the string to be converted. %2 Address of the variable where the integer will be stored.","title":"Arguments"},{"location":"numbers/#usage-example_1","text":"section .data num_str db \"123$\", 0 result dw 0 section .text str_to_int num_str, result","title":"Usage Example"},{"location":"numbers/#int_to_str","text":"","title":"int_to_str"},{"location":"numbers/#description_2","text":"Converts an integer into an ASCII string. The number can be passed in one of the registers ( AX , BX , DX ) or as a memory address. The result is stored in string format in the specified buffer, with the string ending in $ .","title":"Description"},{"location":"numbers/#arguments_2","text":"Parameter Description %1 Address of the buffer where the string representing the number will be stored. %2 Register or memory address containing the integer to be converted. Allowed values: AX , BX , DX , or a memory address.","title":"Arguments"},{"location":"numbers/#usage-example_2","text":"section .data buffer db 10, 0 ; String buffer, must be large enough number dw 1234 ; Number to be converted section .text int_to_str buffer, number","title":"Usage Example"},{"location":"numbers/#int_to_bin","text":"","title":"int_to_bin"},{"location":"numbers/#description_3","text":"Converts an integer (up to 5 digits) into a binary string. The result is stored in string format in the specified buffer. Each bit of the number is represented by the character '0' or '1'. The string is terminated by the null character $ .","title":"Description"},{"location":"numbers/#arguments_3","text":"Parameter Description %1 Address of the integer to be converted to binary format. %2 Address of the buffer where the result (binary string) will be written.","title":"Arguments"},{"location":"numbers/#example-usage","text":"section .data number dw 12345 ; Example number for conversion bin_result db 17, 0 ; Buffer to store the binary string (16 bits + 1 for null character $) section .text int_to_bin number, bin_result","title":"Example usage"},{"location":"strings/","text":"Functions for Strings Expand the list print println print_multi print_inline print_char concat strlen strcopy strcmp substr print Description Prints a string to the screen using the DOS function for string output. The string must end with the $ character. Arguments Parameter Description %1 Address of the string to be printed. Usage Example section .data message db \"Hello, world!$\", 0 section .text print message Description Prints a string to the screen and adds a newline after the output. Uses the print macro for output and the newline macro for a new line. Arguments Parameter Description %1 Address of the string to be printed with a newline. Usage Example section .data message db \"Hey!$\", 0 section .text println message print_multi Description Prints multiple strings to the screen. Uses the println macro to print each string with a newline. Supports a variable number of arguments and requires at least two arguments. Arguments Parameter Description %1, %2, ... Variable number of strings to be printed. Usage Example section .data msg1 db \"Hello,\", 0 msg2 db \"world!\", 0 msg3 db \"How are you?\", 0 section .text print_multi msg1, msg2, msg3 print_inline Description Prints multiple strings in a single line, separating them with spaces. Each argument is printed with a space between them, except for the last one. Supports a variable number of arguments and requires at least two arguments. Arguments Parameter Description %1, %2, ... Variable number of strings to be printed in one line, separated by spaces. Usage Example section .data msg1 db \"Hello,\", 0 msg2 db \"world!\", 0 msg3 db \"How are you?\", 0 section .text print_inline msg1, msg2, msg3 print_char Description Prints a character to the screen followed by a newline. First prints a newline (Carriage Return and Line Feed), then prints the specified character. Arguments Parameter Description %1 Character to be printed. Usage Example section .data char db 'A' ; Character to print section .text print_char char concat Description Concatenates two or more string arguments into a single string. The result is stored in the first provided parameter, which must be a buffer for storing the result. Each string must end with the $ character. Arguments Parameter Description %1 Address of the buffer where the concatenated string will be stored. %2, %3, ... Strings to concatenate. Each string must end with $ . Usage Example section .data str1 db \"Hello$\", 0 str2 db \"World$\", 0 result db 100 dup(0) ; Buffer for result section .text concat result, str1, str2 strlen Description Calculates the length of a string, including only characters up to the first $ character. The result is stored in the variable passed as the first argument. The string must end with $ . Arguments Parameter Description %1 Address of the variable where the string length (integer) will be stored. %2 Address of the string whose length is to be calculated. The string must end with $ . Usage Example section .data my_str db \"Hello$\", 0 length dw 0 section .text strlen length, my_str strcopy Description Copies the content of the second string into the first string. Both strings must end with the $ character. The second string is copied into the first, including the end-of-string $ character. Arguments Parameter Description %1 Address of the first buffer where the string will be copied. %2 Address of the second buffer (string) whose content will be copied. Usage Example section .data str1 db \"Old string$\", 0 str2 db \"New string$\", 0 section .text strcopy str1, str2 strcmp Description Compares two strings and stores the comparison result (whether they are equal or not) in a buffer (must be at least 5 bytes). Both strings must end with the $ character. If the strings are equal, \"True\" is copied into the buffer; otherwise, \"False\" is copied. Arguments Parameter Description %1 Address of the buffer where the comparison result will be stored. %2 Address of the first string to compare. %3 Address of the second string to compare with the first. Usage Example section .data result db 5 str1 db \"Hello$\", 0 str2 db \"Hello$\", 0 section .text strcmp result, str1, str2 substr Description Extracts a substring from a string using two numbers that indicate the start and end positions. If the indices are incorrect (e.g., the end index is greater than the length of the string or the start index is greater than the end), an empty string is written to the buffer, and an error message is displayed. Arguments Parameter Description %1 Address of the buffer where the substring will be written. %2 Address of the source string from which the substring will be extracted. %3 Start position of the substring (index of the first character to extract). %4 End position of the substring (index of the last character to include in the substring). Example usage section .data str db \"Hello, World$\", 0 result db 10, 0 error_msg db \"Invalid indices!\", 0 section .text substr result, str, 7, 12","title":"Functions for Strings"},{"location":"strings/#functions-for-strings","text":"Expand the list print println print_multi print_inline print_char concat strlen strcopy strcmp substr","title":"Functions for Strings"},{"location":"strings/#print","text":"","title":"print"},{"location":"strings/#description","text":"Prints a string to the screen using the DOS function for string output. The string must end with the $ character.","title":"Description"},{"location":"strings/#arguments","text":"Parameter Description %1 Address of the string to be printed.","title":"Arguments"},{"location":"strings/#usage-example","text":"section .data message db \"Hello, world!$\", 0 section .text print message","title":"Usage Example"},{"location":"strings/#description_1","text":"Prints a string to the screen and adds a newline after the output. Uses the print macro for output and the newline macro for a new line.","title":"Description"},{"location":"strings/#arguments_1","text":"Parameter Description %1 Address of the string to be printed with a newline.","title":"Arguments"},{"location":"strings/#usage-example_1","text":"section .data message db \"Hey!$\", 0 section .text println message","title":"Usage Example"},{"location":"strings/#print_multi","text":"","title":"print_multi"},{"location":"strings/#description_2","text":"Prints multiple strings to the screen. Uses the println macro to print each string with a newline. Supports a variable number of arguments and requires at least two arguments.","title":"Description"},{"location":"strings/#arguments_2","text":"Parameter Description %1, %2, ... Variable number of strings to be printed.","title":"Arguments"},{"location":"strings/#usage-example_2","text":"section .data msg1 db \"Hello,\", 0 msg2 db \"world!\", 0 msg3 db \"How are you?\", 0 section .text print_multi msg1, msg2, msg3","title":"Usage Example"},{"location":"strings/#print_inline","text":"","title":"print_inline"},{"location":"strings/#description_3","text":"Prints multiple strings in a single line, separating them with spaces. Each argument is printed with a space between them, except for the last one. Supports a variable number of arguments and requires at least two arguments.","title":"Description"},{"location":"strings/#arguments_3","text":"Parameter Description %1, %2, ... Variable number of strings to be printed in one line, separated by spaces.","title":"Arguments"},{"location":"strings/#usage-example_3","text":"section .data msg1 db \"Hello,\", 0 msg2 db \"world!\", 0 msg3 db \"How are you?\", 0 section .text print_inline msg1, msg2, msg3","title":"Usage Example"},{"location":"strings/#print_char","text":"","title":"print_char"},{"location":"strings/#description_4","text":"Prints a character to the screen followed by a newline. First prints a newline (Carriage Return and Line Feed), then prints the specified character.","title":"Description"},{"location":"strings/#arguments_4","text":"Parameter Description %1 Character to be printed.","title":"Arguments"},{"location":"strings/#usage-example_4","text":"section .data char db 'A' ; Character to print section .text print_char char","title":"Usage Example"},{"location":"strings/#concat","text":"","title":"concat"},{"location":"strings/#description_5","text":"Concatenates two or more string arguments into a single string. The result is stored in the first provided parameter, which must be a buffer for storing the result. Each string must end with the $ character.","title":"Description"},{"location":"strings/#arguments_5","text":"Parameter Description %1 Address of the buffer where the concatenated string will be stored. %2, %3, ... Strings to concatenate. Each string must end with $ .","title":"Arguments"},{"location":"strings/#usage-example_5","text":"section .data str1 db \"Hello$\", 0 str2 db \"World$\", 0 result db 100 dup(0) ; Buffer for result section .text concat result, str1, str2","title":"Usage Example"},{"location":"strings/#strlen","text":"","title":"strlen"},{"location":"strings/#description_6","text":"Calculates the length of a string, including only characters up to the first $ character. The result is stored in the variable passed as the first argument. The string must end with $ .","title":"Description"},{"location":"strings/#arguments_6","text":"Parameter Description %1 Address of the variable where the string length (integer) will be stored. %2 Address of the string whose length is to be calculated. The string must end with $ .","title":"Arguments"},{"location":"strings/#usage-example_6","text":"section .data my_str db \"Hello$\", 0 length dw 0 section .text strlen length, my_str","title":"Usage Example"},{"location":"strings/#strcmp","text":"","title":"strcopy"},{"location":"strings/#description_7","text":"Copies the content of the second string into the first string. Both strings must end with the $ character. The second string is copied into the first, including the end-of-string $ character.","title":"Description"},{"location":"strings/#arguments_7","text":"Parameter Description %1 Address of the first buffer where the string will be copied. %2 Address of the second buffer (string) whose content will be copied.","title":"Arguments"},{"location":"strings/#usage-example_7","text":"section .data str1 db \"Old string$\", 0 str2 db \"New string$\", 0 section .text strcopy str1, str2","title":"Usage Example"},{"location":"strings/#strcmp","text":"","title":"strcopy"},{"location":"strings/#description_8","text":"Compares two strings and stores the comparison result (whether they are equal or not) in a buffer (must be at least 5 bytes). Both strings must end with the $ character. If the strings are equal, \"True\" is copied into the buffer; otherwise, \"False\" is copied.","title":"Description"},{"location":"strings/#arguments_8","text":"Parameter Description %1 Address of the buffer where the comparison result will be stored. %2 Address of the first string to compare. %3 Address of the second string to compare with the first.","title":"Arguments"},{"location":"strings/#usage-example_8","text":"section .data result db 5 str1 db \"Hello$\", 0 str2 db \"Hello$\", 0 section .text strcmp result, str1, str2","title":"Usage Example"},{"location":"strings/#substr","text":"","title":"substr"},{"location":"strings/#description_9","text":"Extracts a substring from a string using two numbers that indicate the start and end positions. If the indices are incorrect (e.g., the end index is greater than the length of the string or the start index is greater than the end), an empty string is written to the buffer, and an error message is displayed.","title":"Description"},{"location":"strings/#arguments_9","text":"Parameter Description %1 Address of the buffer where the substring will be written. %2 Address of the source string from which the substring will be extracted. %3 Start position of the substring (index of the first character to extract). %4 End position of the substring (index of the last character to include in the substring).","title":"Arguments"},{"location":"strings/#example-usage","text":"section .data str db \"Hello, World$\", 0 result db 10, 0 error_msg db \"Invalid indices!\", 0 section .text substr result, str, 7, 12","title":"Example usage"}]}